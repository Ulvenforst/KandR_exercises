#include <stdio.h>

/* Symbolic Constants */
#define TAB_STOP      9 // Tabs of the command prompt
#define COLUMN_BREAK  10 
#define TRUE          1
#define FALSE         0

/* Function Prototypes */
void detab(int c);
void entab(int c);
void fold(int c);
void comment_remover(int c);

int main() {
  int c;
  while ((c = getchar()) != EOF) {
    //detab(c);
    //entab(c);
    //fold(c);
    comment_remover(c);
  }

  return 0;
}


/* Exercise 1-20; replaces tabs in the input with blanks */
void detab(int c) {
  static int i = 1;
  if (c != '\t'){
    putchar(c);
    i = (c != '\n') ? i+1 : 1;
  } else {
    for (int j = 0; j < TAB_STOP - i; ++j)
      putchar(' ');
    i = 1;
  } 
  i = (i >= TAB_STOP) ? 1 : i;
}

/* Exercise 1-21; replaces blanks by the minimum number of tabs and blanks */
void entab(int c) {
  static int char_counter = 0;
  static int space_counter = 0;

  (c != '\n') ? ++char_counter : 0;

  if (char_counter > TAB_STOP || c == '\n') {
    char_counter = (c != '\n') ? 2 : 0; /* Al reinciar los valores se debe
                                         * de considerar el valor anterior
                                         * y el nuevo (2) */
    space_counter = (space_counter > 0) ? 1 : 0;
  } 

  space_counter = (c == ' ' && char_counter <= TAB_STOP) 
    ? space_counter+1 : space_counter;
  
  if (c != ' ' || char_counter == TAB_STOP) { 
    if (char_counter == TAB_STOP && space_counter > 1)
      putchar('\t');
    else if (char_counter <= TAB_STOP && space_counter > 0 && c != ' ') {
      for (int i = 0; i < space_counter; ++i)
        putchar(' ');
      space_counter = 0;
    }
    space_counter = (char_counter == TAB_STOP && c == ' ') ? space_counter : 0;

    (c != ' ') ? putchar(c): 0; 
  } 
}

/* Exercise 1-22; folds long input lines into shorter lines after the last
 * non-blank character that occurs before the n-th column input */
void fold(int c) {
  static int char_count= 0;
  static int inword_count = 0;
  ++char_count;

  inword_count = (c != ' ' && c != '\t' && c != '\n') ? inword_count+1 : 0;

  if (inword_count != 0 && char_count == COLUMN_BREAK) {
    putchar('-');
    putchar('\n');
    char_count = 1;
  } else if (inword_count == 0 && char_count == COLUMN_BREAK) {
    c = '\n';
    char_count = 0;
  }
  putchar(c);

}

/* Exercise 1-23; Removes all comments from a C program */
void comment_remover(int c) {
  static int is_comment = 0;
  static int is_line_comment = FALSE;
  static int is_multi_comment = FALSE;

  if(is_comment == 2) {
    if (c == '\n' && is_line_comment){
      is_comment = 0;
      is_line_comment = FALSE;
      c = '\n';
    } else if (c == '*'){
      is_multi_comment = TRUE; 
      c = 0;
    } else if(c == '/' && is_multi_comment){
      is_comment = 0;
      is_multi_comment = FALSE;
      c = 0;
    } else if (c != '/' && is_multi_comment){
      is_multi_comment = FALSE;
      c = 0;
    } else
      c = 0;
  } else if (c == '/'){
    ++is_comment;
    is_line_comment = TRUE;
    c = 0;
  } else if (is_line_comment && c == '*'){
    ++is_comment;
    is_line_comment = FALSE;
    c = 0;
  } else if (c != '/' && c != '*' && is_line_comment){
    putchar('/');
    is_comment = 0;
    is_line_comment = FALSE;
  }

  putchar(c);
}

